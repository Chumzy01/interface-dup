/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface CampaignFactoryInterface extends utils.Interface {
  functions: {
    "accountInTransit(address)": FunctionFragment;
    "accountTransitStartedBy(address)": FunctionFragment;
    "approvedCampaignTransactionConfig(string)": FunctionFragment;
    "campaignCategories(uint256)": FunctionFragment;
    "campaignCount()": FunctionFragment;
    "campaignFactoryAddress()": FunctionFragment;
    "campaignImplementation()": FunctionFragment;
    "campaignRequestsImplementation()": FunctionFragment;
    "campaignRevenueFromCommissions(address)": FunctionFragment;
    "campaignRewardsImplementation()": FunctionFragment;
    "campaignTransactionConfig(string)": FunctionFragment;
    "campaignTransactionConfigList(uint256)": FunctionFragment;
    "campaignVotesImplementation()": FunctionFragment;
    "campaigns(address)": FunctionFragment;
    "categoryCommission(uint256)": FunctionFragment;
    "categoryCount()": FunctionFragment;
    "categoryTitleIsTaken(string)": FunctionFragment;
    "factoryRevenue()": FunctionFragment;
    "governance()": FunctionFragment;
    "isUserTrustee(address,address)": FunctionFragment;
    "paused()": FunctionFragment;
    "tokens(address)": FunctionFragment;
    "trustees(uint256)": FunctionFragment;
    "userCount()": FunctionFragment;
    "userExists(address)": FunctionFragment;
    "userTrusteeCount(address)": FunctionFragment;
    "users(address)": FunctionFragment;
    "__CampaignFactory_init(address,address,address,address,address,uint256[15])": FunctionFragment;
    "setCampaignImplementation(address)": FunctionFragment;
    "setCampaignRewardImplementation(address)": FunctionFragment;
    "setCampaignRequestImplementation(address)": FunctionFragment;
    "setCampaignVoteImplementation(address)": FunctionFragment;
    "addFactoryTransactionConfig(string)": FunctionFragment;
    "setCampaignTransactionConfig(string,uint256)": FunctionFragment;
    "setDefaultCommission(uint256,uint256)": FunctionFragment;
    "setCategoryCommission(uint256,uint256,uint256)": FunctionFragment;
    "addToken(address,bool,string)": FunctionFragment;
    "toggleAcceptedToken(address,bool)": FunctionFragment;
    "canManageCampaigns(address)": FunctionFragment;
    "receiveCampaignCommission(address,uint256)": FunctionFragment;
    "signUp(string)": FunctionFragment;
    "userIsVerified(address)": FunctionFragment;
    "initiateUserTransfer(address,bool)": FunctionFragment;
    "deactivateAccountTransfer()": FunctionFragment;
    "addTrustee(address)": FunctionFragment;
    "removeTrustee(uint256)": FunctionFragment;
    "toggleUserApproval(address,bool)": FunctionFragment;
    "createCampaign(uint256,bool,string)": FunctionFragment;
    "toggleCampaignActivation(address)": FunctionFragment;
    "toggleCampaignPrivacy(address)": FunctionFragment;
    "modifyCampaignCategory(address,uint256)": FunctionFragment;
    "createCategory(bool,string,string)": FunctionFragment;
    "modifyCategory(uint256,bool,string)": FunctionFragment;
    "unpauseCampaign()": FunctionFragment;
    "pauseCampaign()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "accountInTransit"
      | "accountTransitStartedBy"
      | "approvedCampaignTransactionConfig"
      | "campaignCategories"
      | "campaignCount"
      | "campaignFactoryAddress"
      | "campaignImplementation"
      | "campaignRequestsImplementation"
      | "campaignRevenueFromCommissions"
      | "campaignRewardsImplementation"
      | "campaignTransactionConfig"
      | "campaignTransactionConfigList"
      | "campaignVotesImplementation"
      | "campaigns"
      | "categoryCommission"
      | "categoryCount"
      | "categoryTitleIsTaken"
      | "factoryRevenue"
      | "governance"
      | "isUserTrustee"
      | "paused"
      | "tokens"
      | "trustees"
      | "userCount"
      | "userExists"
      | "userTrusteeCount"
      | "users"
      | "__CampaignFactory_init"
      | "setCampaignImplementation"
      | "setCampaignRewardImplementation"
      | "setCampaignRequestImplementation"
      | "setCampaignVoteImplementation"
      | "addFactoryTransactionConfig"
      | "setCampaignTransactionConfig"
      | "setDefaultCommission"
      | "setCategoryCommission"
      | "addToken"
      | "toggleAcceptedToken"
      | "canManageCampaigns"
      | "receiveCampaignCommission"
      | "signUp"
      | "userIsVerified"
      | "initiateUserTransfer"
      | "deactivateAccountTransfer"
      | "addTrustee"
      | "removeTrustee"
      | "toggleUserApproval"
      | "createCampaign"
      | "toggleCampaignActivation"
      | "toggleCampaignPrivacy"
      | "modifyCampaignCategory"
      | "createCategory"
      | "modifyCategory"
      | "unpauseCampaign"
      | "pauseCampaign"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "accountInTransit",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "accountTransitStartedBy",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedCampaignTransactionConfig",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "campaignCategories",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "campaignCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaignFactoryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaignImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaignRequestsImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaignRevenueFromCommissions",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "campaignRewardsImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaignTransactionConfig",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "campaignTransactionConfigList",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "campaignVotesImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaigns",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "categoryCommission",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "categoryCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "categoryTitleIsTaken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "factoryRevenue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isUserTrustee",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "trustees",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "userCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userExists",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userTrusteeCount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "users",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "__CampaignFactory_init",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setCampaignImplementation",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCampaignRewardImplementation",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCampaignRequestImplementation",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCampaignVoteImplementation",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addFactoryTransactionConfig",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCampaignTransactionConfig",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultCommission",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCategoryCommission",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleAcceptedToken",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "canManageCampaigns",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveCampaignCommission",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "signUp",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userIsVerified",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateUserTransfer",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateAccountTransfer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addTrustee",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTrustee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleUserApproval",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "createCampaign",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleCampaignActivation",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleCampaignPrivacy",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyCampaignCategory",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createCategory",
    values: [
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyCategory",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseCampaign",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pauseCampaign",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "accountInTransit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountTransitStartedBy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedCampaignTransactionConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignCategories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignFactoryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignRequestsImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignRevenueFromCommissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignRewardsImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignTransactionConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignTransactionConfigList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignVotesImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "campaigns", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "categoryCommission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "categoryCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "categoryTitleIsTaken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "factoryRevenue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isUserTrustee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "trustees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userExists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userTrusteeCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "__CampaignFactory_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCampaignImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCampaignRewardImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCampaignRequestImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCampaignVoteImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addFactoryTransactionConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCampaignTransactionConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultCommission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCategoryCommission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleAcceptedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canManageCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveCampaignCommission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "signUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userIsVerified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateUserTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateAccountTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addTrustee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeTrustee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleUserApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleCampaignActivation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleCampaignPrivacy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyCampaignCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpauseCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseCampaign",
    data: BytesLike
  ): Result;

  events: {
    "CampaignActivation(address,bool)": EventFragment;
    "CampaignCategoryChange(address,uint256)": EventFragment;
    "CampaignDefaultCommissionUpdated(uint256)": EventFragment;
    "CampaignDeployed(address,address,address,address,address,uint256,bool,string)": EventFragment;
    "CampaignImplementationUpdated(address)": EventFragment;
    "CampaignPrivacyChange(address,bool)": EventFragment;
    "CampaignRequestImplementationUpdated(address)": EventFragment;
    "CampaignRewardImplementationUpdated(address)": EventFragment;
    "CampaignTransactionConfigUpdated(string,uint256)": EventFragment;
    "CampaignVoteImplementationUpdated(address)": EventFragment;
    "CategoryAdded(uint256,bool,string,string)": EventFragment;
    "CategoryCommissionUpdated(uint256,uint256)": EventFragment;
    "CategoryModified(uint256,bool,string)": EventFragment;
    "Paused(address)": EventFragment;
    "TokenAdded(address,bool,string)": EventFragment;
    "TokenApproval(address,bool)": EventFragment;
    "TrusteeAdded(uint256,address)": EventFragment;
    "TrusteeRemoved(uint256,address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "UserAdded(address,string)": EventFragment;
    "UserApproval(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CampaignActivation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CampaignCategoryChange"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CampaignDefaultCommissionUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CampaignDeployed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CampaignImplementationUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CampaignPrivacyChange"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CampaignRequestImplementationUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CampaignRewardImplementationUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CampaignTransactionConfigUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CampaignVoteImplementationUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CategoryAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CategoryCommissionUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CategoryModified"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenApproval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TrusteeAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TrusteeRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserApproval"): EventFragment;
}

export interface CampaignActivationEventObject {
  campaign: string;
  active: boolean;
}
export type CampaignActivationEvent = TypedEvent<
  [string, boolean],
  CampaignActivationEventObject
>;

export type CampaignActivationEventFilter =
  TypedEventFilter<CampaignActivationEvent>;

export interface CampaignCategoryChangeEventObject {
  campaign: string;
  newCategory: BigNumber;
}
export type CampaignCategoryChangeEvent = TypedEvent<
  [string, BigNumber],
  CampaignCategoryChangeEventObject
>;

export type CampaignCategoryChangeEventFilter =
  TypedEventFilter<CampaignCategoryChangeEvent>;

export interface CampaignDefaultCommissionUpdatedEventObject {
  commission: BigNumber;
}
export type CampaignDefaultCommissionUpdatedEvent = TypedEvent<
  [BigNumber],
  CampaignDefaultCommissionUpdatedEventObject
>;

export type CampaignDefaultCommissionUpdatedEventFilter =
  TypedEventFilter<CampaignDefaultCommissionUpdatedEvent>;

export interface CampaignDeployedEventObject {
  factory: string;
  campaign: string;
  campaignRewards: string;
  campaignRequests: string;
  campaignVotes: string;
  category: BigNumber;
  privateCampaign: boolean;
  hashedCampaignInfo: string;
}
export type CampaignDeployedEvent = TypedEvent<
  [string, string, string, string, string, BigNumber, boolean, string],
  CampaignDeployedEventObject
>;

export type CampaignDeployedEventFilter =
  TypedEventFilter<CampaignDeployedEvent>;

export interface CampaignImplementationUpdatedEventObject {
  campaignImplementation: string;
}
export type CampaignImplementationUpdatedEvent = TypedEvent<
  [string],
  CampaignImplementationUpdatedEventObject
>;

export type CampaignImplementationUpdatedEventFilter =
  TypedEventFilter<CampaignImplementationUpdatedEvent>;

export interface CampaignPrivacyChangeEventObject {
  campaign: string;
  privateCampaign: boolean;
}
export type CampaignPrivacyChangeEvent = TypedEvent<
  [string, boolean],
  CampaignPrivacyChangeEventObject
>;

export type CampaignPrivacyChangeEventFilter =
  TypedEventFilter<CampaignPrivacyChangeEvent>;

export interface CampaignRequestImplementationUpdatedEventObject {
  campaignRequestImplementation: string;
}
export type CampaignRequestImplementationUpdatedEvent = TypedEvent<
  [string],
  CampaignRequestImplementationUpdatedEventObject
>;

export type CampaignRequestImplementationUpdatedEventFilter =
  TypedEventFilter<CampaignRequestImplementationUpdatedEvent>;

export interface CampaignRewardImplementationUpdatedEventObject {
  campaignRewardImplementation: string;
}
export type CampaignRewardImplementationUpdatedEvent = TypedEvent<
  [string],
  CampaignRewardImplementationUpdatedEventObject
>;

export type CampaignRewardImplementationUpdatedEventFilter =
  TypedEventFilter<CampaignRewardImplementationUpdatedEvent>;

export interface CampaignTransactionConfigUpdatedEventObject {
  prop: string;
  value: BigNumber;
}
export type CampaignTransactionConfigUpdatedEvent = TypedEvent<
  [string, BigNumber],
  CampaignTransactionConfigUpdatedEventObject
>;

export type CampaignTransactionConfigUpdatedEventFilter =
  TypedEventFilter<CampaignTransactionConfigUpdatedEvent>;

export interface CampaignVoteImplementationUpdatedEventObject {
  campaignVoteImplementation: string;
}
export type CampaignVoteImplementationUpdatedEvent = TypedEvent<
  [string],
  CampaignVoteImplementationUpdatedEventObject
>;

export type CampaignVoteImplementationUpdatedEventFilter =
  TypedEventFilter<CampaignVoteImplementationUpdatedEvent>;

export interface CategoryAddedEventObject {
  categoryId: BigNumber;
  active: boolean;
  title: string;
  hashedCategory: string;
}
export type CategoryAddedEvent = TypedEvent<
  [BigNumber, boolean, string, string],
  CategoryAddedEventObject
>;

export type CategoryAddedEventFilter = TypedEventFilter<CategoryAddedEvent>;

export interface CategoryCommissionUpdatedEventObject {
  categoryId: BigNumber;
  commission: BigNumber;
}
export type CategoryCommissionUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  CategoryCommissionUpdatedEventObject
>;

export type CategoryCommissionUpdatedEventFilter =
  TypedEventFilter<CategoryCommissionUpdatedEvent>;

export interface CategoryModifiedEventObject {
  categoryId: BigNumber;
  active: boolean;
  title: string;
}
export type CategoryModifiedEvent = TypedEvent<
  [BigNumber, boolean, string],
  CategoryModifiedEventObject
>;

export type CategoryModifiedEventFilter =
  TypedEventFilter<CategoryModifiedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface TokenAddedEventObject {
  token: string;
  approval: boolean;
  hashedToken: string;
}
export type TokenAddedEvent = TypedEvent<
  [string, boolean, string],
  TokenAddedEventObject
>;

export type TokenAddedEventFilter = TypedEventFilter<TokenAddedEvent>;

export interface TokenApprovalEventObject {
  token: string;
  state: boolean;
}
export type TokenApprovalEvent = TypedEvent<
  [string, boolean],
  TokenApprovalEventObject
>;

export type TokenApprovalEventFilter = TypedEventFilter<TokenApprovalEvent>;

export interface TrusteeAddedEventObject {
  trusteeId: BigNumber;
  trusteeAddress: string;
}
export type TrusteeAddedEvent = TypedEvent<
  [BigNumber, string],
  TrusteeAddedEventObject
>;

export type TrusteeAddedEventFilter = TypedEventFilter<TrusteeAddedEvent>;

export interface TrusteeRemovedEventObject {
  trusteeId: BigNumber;
  trusteeAddress: string;
}
export type TrusteeRemovedEvent = TypedEvent<
  [BigNumber, string],
  TrusteeRemovedEventObject
>;

export type TrusteeRemovedEventFilter = TypedEventFilter<TrusteeRemovedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UserAddedEventObject {
  userId: string;
  hashedUser: string;
}
export type UserAddedEvent = TypedEvent<[string, string], UserAddedEventObject>;

export type UserAddedEventFilter = TypedEventFilter<UserAddedEvent>;

export interface UserApprovalEventObject {
  user: string;
  approval: boolean;
}
export type UserApprovalEvent = TypedEvent<
  [string, boolean],
  UserApprovalEventObject
>;

export type UserApprovalEventFilter = TypedEventFilter<UserApprovalEvent>;

export interface CampaignFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CampaignFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accountInTransit(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    accountTransitStartedBy(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    approvedCampaignTransactionConfig(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    campaignCategories(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, string, boolean, boolean] & {
        campaignCount: BigNumber;
        createdAt: BigNumber;
        updatedAt: BigNumber;
        title: string;
        hashedCategory: string;
        active: boolean;
        exists: boolean;
      }
    >;

    campaignCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    campaignFactoryAddress(overrides?: CallOverrides): Promise<[string]>;

    campaignImplementation(overrides?: CallOverrides): Promise<[string]>;

    campaignRequestsImplementation(
      overrides?: CallOverrides
    ): Promise<[string]>;

    campaignRevenueFromCommissions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    campaignRewardsImplementation(overrides?: CallOverrides): Promise<[string]>;

    campaignTransactionConfig(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    campaignTransactionConfigList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    campaignVotesImplementation(overrides?: CallOverrides): Promise<[string]>;

    campaigns(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, string, boolean, boolean] & {
        owner: string;
        createdAt: BigNumber;
        updatedAt: BigNumber;
        category: BigNumber;
        hashedCampaignInfo: string;
        active: boolean;
        privateCampaign: boolean;
      }
    >;

    categoryCommission(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    categoryCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    categoryTitleIsTaken(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    factoryRevenue(overrides?: CallOverrides): Promise<[BigNumber]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    isUserTrustee(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    tokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean] & {
        token: string;
        hashedToken: string;
        approved: boolean;
      }
    >;

    trustees(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, boolean] & {
        trustee: string;
        trustor: string;
        createdAt: BigNumber;
        isTrusted: boolean;
      }
    >;

    userCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    userExists(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    userTrusteeCount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    users(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, boolean] & {
        joined: BigNumber;
        updatedAt: BigNumber;
        hashedUser: string;
        verified: boolean;
      }
    >;

    __CampaignFactory_init(
      _governance: PromiseOrValue<string>,
      _campaignImplementation: PromiseOrValue<string>,
      _campaignRequestImplementation: PromiseOrValue<string>,
      _campaignVoteImplementation: PromiseOrValue<string>,
      _campaignRewardImplementation: PromiseOrValue<string>,
      _config: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCampaignImplementation(
      _campaignImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCampaignRewardImplementation(
      _campaignRewardsImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCampaignRequestImplementation(
      _campaignRequestsImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCampaignVoteImplementation(
      _campaignVotesImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addFactoryTransactionConfig(
      _prop: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCampaignTransactionConfig(
      _prop: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDefaultCommission(
      _numerator: PromiseOrValue<BigNumberish>,
      _denominator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCategoryCommission(
      _categoryId: PromiseOrValue<BigNumberish>,
      _numerator: PromiseOrValue<BigNumberish>,
      _denominator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addToken(
      _token: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      _hashedToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    toggleAcceptedToken(
      _token: PromiseOrValue<string>,
      _state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    canManageCampaigns(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    receiveCampaignCommission(
      _campaign: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signUp(
      _hashedUser: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userIsVerified(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initiateUserTransfer(
      _user: PromiseOrValue<string>,
      _forSelf: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deactivateAccountTransfer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addTrustee(
      _trustee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeTrustee(
      _trusteeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    toggleUserApproval(
      _user: PromiseOrValue<string>,
      _approval: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createCampaign(
      _categoryId: PromiseOrValue<BigNumberish>,
      _privateCampaign: PromiseOrValue<boolean>,
      _hashedCampaignInfo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    toggleCampaignActivation(
      _campaign: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    toggleCampaignPrivacy(
      _campaign: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    modifyCampaignCategory(
      _campaign: PromiseOrValue<string>,
      _newCategoryId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createCategory(
      _active: PromiseOrValue<boolean>,
      _title: PromiseOrValue<string>,
      _hashedCategory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    modifyCategory(
      _categoryId: PromiseOrValue<BigNumberish>,
      _active: PromiseOrValue<boolean>,
      _title: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpauseCampaign(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pauseCampaign(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  accountInTransit(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  accountTransitStartedBy(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  approvedCampaignTransactionConfig(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  campaignCategories(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string, string, boolean, boolean] & {
      campaignCount: BigNumber;
      createdAt: BigNumber;
      updatedAt: BigNumber;
      title: string;
      hashedCategory: string;
      active: boolean;
      exists: boolean;
    }
  >;

  campaignCount(overrides?: CallOverrides): Promise<BigNumber>;

  campaignFactoryAddress(overrides?: CallOverrides): Promise<string>;

  campaignImplementation(overrides?: CallOverrides): Promise<string>;

  campaignRequestsImplementation(overrides?: CallOverrides): Promise<string>;

  campaignRevenueFromCommissions(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  campaignRewardsImplementation(overrides?: CallOverrides): Promise<string>;

  campaignTransactionConfig(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  campaignTransactionConfigList(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  campaignVotesImplementation(overrides?: CallOverrides): Promise<string>;

  campaigns(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, string, boolean, boolean] & {
      owner: string;
      createdAt: BigNumber;
      updatedAt: BigNumber;
      category: BigNumber;
      hashedCampaignInfo: string;
      active: boolean;
      privateCampaign: boolean;
    }
  >;

  categoryCommission(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  categoryCount(overrides?: CallOverrides): Promise<BigNumber>;

  categoryTitleIsTaken(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  factoryRevenue(overrides?: CallOverrides): Promise<BigNumber>;

  governance(overrides?: CallOverrides): Promise<string>;

  isUserTrustee(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  tokens(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, boolean] & {
      token: string;
      hashedToken: string;
      approved: boolean;
    }
  >;

  trustees(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, boolean] & {
      trustee: string;
      trustor: string;
      createdAt: BigNumber;
      isTrusted: boolean;
    }
  >;

  userCount(overrides?: CallOverrides): Promise<BigNumber>;

  userExists(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  userTrusteeCount(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  users(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, boolean] & {
      joined: BigNumber;
      updatedAt: BigNumber;
      hashedUser: string;
      verified: boolean;
    }
  >;

  __CampaignFactory_init(
    _governance: PromiseOrValue<string>,
    _campaignImplementation: PromiseOrValue<string>,
    _campaignRequestImplementation: PromiseOrValue<string>,
    _campaignVoteImplementation: PromiseOrValue<string>,
    _campaignRewardImplementation: PromiseOrValue<string>,
    _config: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCampaignImplementation(
    _campaignImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCampaignRewardImplementation(
    _campaignRewardsImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCampaignRequestImplementation(
    _campaignRequestsImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCampaignVoteImplementation(
    _campaignVotesImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addFactoryTransactionConfig(
    _prop: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCampaignTransactionConfig(
    _prop: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDefaultCommission(
    _numerator: PromiseOrValue<BigNumberish>,
    _denominator: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCategoryCommission(
    _categoryId: PromiseOrValue<BigNumberish>,
    _numerator: PromiseOrValue<BigNumberish>,
    _denominator: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addToken(
    _token: PromiseOrValue<string>,
    _approved: PromiseOrValue<boolean>,
    _hashedToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  toggleAcceptedToken(
    _token: PromiseOrValue<string>,
    _state: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  canManageCampaigns(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  receiveCampaignCommission(
    _campaign: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signUp(
    _hashedUser: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userIsVerified(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initiateUserTransfer(
    _user: PromiseOrValue<string>,
    _forSelf: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deactivateAccountTransfer(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addTrustee(
    _trustee: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeTrustee(
    _trusteeId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  toggleUserApproval(
    _user: PromiseOrValue<string>,
    _approval: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createCampaign(
    _categoryId: PromiseOrValue<BigNumberish>,
    _privateCampaign: PromiseOrValue<boolean>,
    _hashedCampaignInfo: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  toggleCampaignActivation(
    _campaign: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  toggleCampaignPrivacy(
    _campaign: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  modifyCampaignCategory(
    _campaign: PromiseOrValue<string>,
    _newCategoryId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createCategory(
    _active: PromiseOrValue<boolean>,
    _title: PromiseOrValue<string>,
    _hashedCategory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  modifyCategory(
    _categoryId: PromiseOrValue<BigNumberish>,
    _active: PromiseOrValue<boolean>,
    _title: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpauseCampaign(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pauseCampaign(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    accountInTransit(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    accountTransitStartedBy(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    approvedCampaignTransactionConfig(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    campaignCategories(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, string, boolean, boolean] & {
        campaignCount: BigNumber;
        createdAt: BigNumber;
        updatedAt: BigNumber;
        title: string;
        hashedCategory: string;
        active: boolean;
        exists: boolean;
      }
    >;

    campaignCount(overrides?: CallOverrides): Promise<BigNumber>;

    campaignFactoryAddress(overrides?: CallOverrides): Promise<string>;

    campaignImplementation(overrides?: CallOverrides): Promise<string>;

    campaignRequestsImplementation(overrides?: CallOverrides): Promise<string>;

    campaignRevenueFromCommissions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    campaignRewardsImplementation(overrides?: CallOverrides): Promise<string>;

    campaignTransactionConfig(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    campaignTransactionConfigList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    campaignVotesImplementation(overrides?: CallOverrides): Promise<string>;

    campaigns(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, string, boolean, boolean] & {
        owner: string;
        createdAt: BigNumber;
        updatedAt: BigNumber;
        category: BigNumber;
        hashedCampaignInfo: string;
        active: boolean;
        privateCampaign: boolean;
      }
    >;

    categoryCommission(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    categoryCount(overrides?: CallOverrides): Promise<BigNumber>;

    categoryTitleIsTaken(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    factoryRevenue(overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<string>;

    isUserTrustee(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    tokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean] & {
        token: string;
        hashedToken: string;
        approved: boolean;
      }
    >;

    trustees(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, boolean] & {
        trustee: string;
        trustor: string;
        createdAt: BigNumber;
        isTrusted: boolean;
      }
    >;

    userCount(overrides?: CallOverrides): Promise<BigNumber>;

    userExists(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    userTrusteeCount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    users(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, boolean] & {
        joined: BigNumber;
        updatedAt: BigNumber;
        hashedUser: string;
        verified: boolean;
      }
    >;

    __CampaignFactory_init(
      _governance: PromiseOrValue<string>,
      _campaignImplementation: PromiseOrValue<string>,
      _campaignRequestImplementation: PromiseOrValue<string>,
      _campaignVoteImplementation: PromiseOrValue<string>,
      _campaignRewardImplementation: PromiseOrValue<string>,
      _config: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setCampaignImplementation(
      _campaignImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCampaignRewardImplementation(
      _campaignRewardsImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCampaignRequestImplementation(
      _campaignRequestsImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCampaignVoteImplementation(
      _campaignVotesImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addFactoryTransactionConfig(
      _prop: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCampaignTransactionConfig(
      _prop: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDefaultCommission(
      _numerator: PromiseOrValue<BigNumberish>,
      _denominator: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCategoryCommission(
      _categoryId: PromiseOrValue<BigNumberish>,
      _numerator: PromiseOrValue<BigNumberish>,
      _denominator: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addToken(
      _token: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      _hashedToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    toggleAcceptedToken(
      _token: PromiseOrValue<string>,
      _state: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    canManageCampaigns(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    receiveCampaignCommission(
      _campaign: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    signUp(
      _hashedUser: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    userIsVerified(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initiateUserTransfer(
      _user: PromiseOrValue<string>,
      _forSelf: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    deactivateAccountTransfer(overrides?: CallOverrides): Promise<void>;

    addTrustee(
      _trustee: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeTrustee(
      _trusteeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    toggleUserApproval(
      _user: PromiseOrValue<string>,
      _approval: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    createCampaign(
      _categoryId: PromiseOrValue<BigNumberish>,
      _privateCampaign: PromiseOrValue<boolean>,
      _hashedCampaignInfo: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    toggleCampaignActivation(
      _campaign: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    toggleCampaignPrivacy(
      _campaign: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    modifyCampaignCategory(
      _campaign: PromiseOrValue<string>,
      _newCategoryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createCategory(
      _active: PromiseOrValue<boolean>,
      _title: PromiseOrValue<string>,
      _hashedCategory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    modifyCategory(
      _categoryId: PromiseOrValue<BigNumberish>,
      _active: PromiseOrValue<boolean>,
      _title: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpauseCampaign(overrides?: CallOverrides): Promise<void>;

    pauseCampaign(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "CampaignActivation(address,bool)"(
      campaign?: PromiseOrValue<string> | null,
      active?: null
    ): CampaignActivationEventFilter;
    CampaignActivation(
      campaign?: PromiseOrValue<string> | null,
      active?: null
    ): CampaignActivationEventFilter;

    "CampaignCategoryChange(address,uint256)"(
      campaign?: PromiseOrValue<string> | null,
      newCategory?: null
    ): CampaignCategoryChangeEventFilter;
    CampaignCategoryChange(
      campaign?: PromiseOrValue<string> | null,
      newCategory?: null
    ): CampaignCategoryChangeEventFilter;

    "CampaignDefaultCommissionUpdated(uint256)"(
      commission?: null
    ): CampaignDefaultCommissionUpdatedEventFilter;
    CampaignDefaultCommissionUpdated(
      commission?: null
    ): CampaignDefaultCommissionUpdatedEventFilter;

    "CampaignDeployed(address,address,address,address,address,uint256,bool,string)"(
      factory?: null,
      campaign?: null,
      campaignRewards?: null,
      campaignRequests?: null,
      campaignVotes?: null,
      category?: null,
      privateCampaign?: null,
      hashedCampaignInfo?: null
    ): CampaignDeployedEventFilter;
    CampaignDeployed(
      factory?: null,
      campaign?: null,
      campaignRewards?: null,
      campaignRequests?: null,
      campaignVotes?: null,
      category?: null,
      privateCampaign?: null,
      hashedCampaignInfo?: null
    ): CampaignDeployedEventFilter;

    "CampaignImplementationUpdated(address)"(
      campaignImplementation?: PromiseOrValue<string> | null
    ): CampaignImplementationUpdatedEventFilter;
    CampaignImplementationUpdated(
      campaignImplementation?: PromiseOrValue<string> | null
    ): CampaignImplementationUpdatedEventFilter;

    "CampaignPrivacyChange(address,bool)"(
      campaign?: PromiseOrValue<string> | null,
      privateCampaign?: null
    ): CampaignPrivacyChangeEventFilter;
    CampaignPrivacyChange(
      campaign?: PromiseOrValue<string> | null,
      privateCampaign?: null
    ): CampaignPrivacyChangeEventFilter;

    "CampaignRequestImplementationUpdated(address)"(
      campaignRequestImplementation?: PromiseOrValue<string> | null
    ): CampaignRequestImplementationUpdatedEventFilter;
    CampaignRequestImplementationUpdated(
      campaignRequestImplementation?: PromiseOrValue<string> | null
    ): CampaignRequestImplementationUpdatedEventFilter;

    "CampaignRewardImplementationUpdated(address)"(
      campaignRewardImplementation?: PromiseOrValue<string> | null
    ): CampaignRewardImplementationUpdatedEventFilter;
    CampaignRewardImplementationUpdated(
      campaignRewardImplementation?: PromiseOrValue<string> | null
    ): CampaignRewardImplementationUpdatedEventFilter;

    "CampaignTransactionConfigUpdated(string,uint256)"(
      prop?: null,
      value?: null
    ): CampaignTransactionConfigUpdatedEventFilter;
    CampaignTransactionConfigUpdated(
      prop?: null,
      value?: null
    ): CampaignTransactionConfigUpdatedEventFilter;

    "CampaignVoteImplementationUpdated(address)"(
      campaignVoteImplementation?: PromiseOrValue<string> | null
    ): CampaignVoteImplementationUpdatedEventFilter;
    CampaignVoteImplementationUpdated(
      campaignVoteImplementation?: PromiseOrValue<string> | null
    ): CampaignVoteImplementationUpdatedEventFilter;

    "CategoryAdded(uint256,bool,string,string)"(
      categoryId?: PromiseOrValue<BigNumberish> | null,
      active?: null,
      title?: null,
      hashedCategory?: null
    ): CategoryAddedEventFilter;
    CategoryAdded(
      categoryId?: PromiseOrValue<BigNumberish> | null,
      active?: null,
      title?: null,
      hashedCategory?: null
    ): CategoryAddedEventFilter;

    "CategoryCommissionUpdated(uint256,uint256)"(
      categoryId?: PromiseOrValue<BigNumberish> | null,
      commission?: null
    ): CategoryCommissionUpdatedEventFilter;
    CategoryCommissionUpdated(
      categoryId?: PromiseOrValue<BigNumberish> | null,
      commission?: null
    ): CategoryCommissionUpdatedEventFilter;

    "CategoryModified(uint256,bool,string)"(
      categoryId?: PromiseOrValue<BigNumberish> | null,
      active?: null,
      title?: null
    ): CategoryModifiedEventFilter;
    CategoryModified(
      categoryId?: PromiseOrValue<BigNumberish> | null,
      active?: null,
      title?: null
    ): CategoryModifiedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "TokenAdded(address,bool,string)"(
      token?: PromiseOrValue<string> | null,
      approval?: null,
      hashedToken?: null
    ): TokenAddedEventFilter;
    TokenAdded(
      token?: PromiseOrValue<string> | null,
      approval?: null,
      hashedToken?: null
    ): TokenAddedEventFilter;

    "TokenApproval(address,bool)"(
      token?: PromiseOrValue<string> | null,
      state?: null
    ): TokenApprovalEventFilter;
    TokenApproval(
      token?: PromiseOrValue<string> | null,
      state?: null
    ): TokenApprovalEventFilter;

    "TrusteeAdded(uint256,address)"(
      trusteeId?: PromiseOrValue<BigNumberish> | null,
      trusteeAddress?: null
    ): TrusteeAddedEventFilter;
    TrusteeAdded(
      trusteeId?: PromiseOrValue<BigNumberish> | null,
      trusteeAddress?: null
    ): TrusteeAddedEventFilter;

    "TrusteeRemoved(uint256,address)"(
      trusteeId?: PromiseOrValue<BigNumberish> | null,
      trusteeAddress?: null
    ): TrusteeRemovedEventFilter;
    TrusteeRemoved(
      trusteeId?: PromiseOrValue<BigNumberish> | null,
      trusteeAddress?: null
    ): TrusteeRemovedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "UserAdded(address,string)"(
      userId?: PromiseOrValue<string> | null,
      hashedUser?: null
    ): UserAddedEventFilter;
    UserAdded(
      userId?: PromiseOrValue<string> | null,
      hashedUser?: null
    ): UserAddedEventFilter;

    "UserApproval(address,bool)"(
      user?: PromiseOrValue<string> | null,
      approval?: null
    ): UserApprovalEventFilter;
    UserApproval(
      user?: PromiseOrValue<string> | null,
      approval?: null
    ): UserApprovalEventFilter;
  };

  estimateGas: {
    accountInTransit(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    accountTransitStartedBy(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approvedCampaignTransactionConfig(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    campaignCategories(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    campaignCount(overrides?: CallOverrides): Promise<BigNumber>;

    campaignFactoryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    campaignImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    campaignRequestsImplementation(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    campaignRevenueFromCommissions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    campaignRewardsImplementation(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    campaignTransactionConfig(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    campaignTransactionConfigList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    campaignVotesImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    campaigns(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    categoryCommission(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    categoryCount(overrides?: CallOverrides): Promise<BigNumber>;

    categoryTitleIsTaken(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factoryRevenue(overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    isUserTrustee(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    tokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    trustees(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userCount(overrides?: CallOverrides): Promise<BigNumber>;

    userExists(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userTrusteeCount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    users(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    __CampaignFactory_init(
      _governance: PromiseOrValue<string>,
      _campaignImplementation: PromiseOrValue<string>,
      _campaignRequestImplementation: PromiseOrValue<string>,
      _campaignVoteImplementation: PromiseOrValue<string>,
      _campaignRewardImplementation: PromiseOrValue<string>,
      _config: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCampaignImplementation(
      _campaignImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCampaignRewardImplementation(
      _campaignRewardsImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCampaignRequestImplementation(
      _campaignRequestsImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCampaignVoteImplementation(
      _campaignVotesImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addFactoryTransactionConfig(
      _prop: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCampaignTransactionConfig(
      _prop: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDefaultCommission(
      _numerator: PromiseOrValue<BigNumberish>,
      _denominator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCategoryCommission(
      _categoryId: PromiseOrValue<BigNumberish>,
      _numerator: PromiseOrValue<BigNumberish>,
      _denominator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addToken(
      _token: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      _hashedToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    toggleAcceptedToken(
      _token: PromiseOrValue<string>,
      _state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    canManageCampaigns(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    receiveCampaignCommission(
      _campaign: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signUp(
      _hashedUser: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userIsVerified(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initiateUserTransfer(
      _user: PromiseOrValue<string>,
      _forSelf: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deactivateAccountTransfer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addTrustee(
      _trustee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeTrustee(
      _trusteeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    toggleUserApproval(
      _user: PromiseOrValue<string>,
      _approval: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createCampaign(
      _categoryId: PromiseOrValue<BigNumberish>,
      _privateCampaign: PromiseOrValue<boolean>,
      _hashedCampaignInfo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    toggleCampaignActivation(
      _campaign: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    toggleCampaignPrivacy(
      _campaign: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    modifyCampaignCategory(
      _campaign: PromiseOrValue<string>,
      _newCategoryId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createCategory(
      _active: PromiseOrValue<boolean>,
      _title: PromiseOrValue<string>,
      _hashedCategory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    modifyCategory(
      _categoryId: PromiseOrValue<BigNumberish>,
      _active: PromiseOrValue<boolean>,
      _title: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpauseCampaign(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pauseCampaign(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accountInTransit(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accountTransitStartedBy(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approvedCampaignTransactionConfig(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    campaignCategories(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    campaignCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    campaignFactoryAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    campaignImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    campaignRequestsImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    campaignRevenueFromCommissions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    campaignRewardsImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    campaignTransactionConfig(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    campaignTransactionConfigList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    campaignVotesImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    campaigns(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    categoryCommission(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    categoryCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    categoryTitleIsTaken(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    factoryRevenue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isUserTrustee(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    trustees(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userExists(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userTrusteeCount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    users(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    __CampaignFactory_init(
      _governance: PromiseOrValue<string>,
      _campaignImplementation: PromiseOrValue<string>,
      _campaignRequestImplementation: PromiseOrValue<string>,
      _campaignVoteImplementation: PromiseOrValue<string>,
      _campaignRewardImplementation: PromiseOrValue<string>,
      _config: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCampaignImplementation(
      _campaignImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCampaignRewardImplementation(
      _campaignRewardsImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCampaignRequestImplementation(
      _campaignRequestsImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCampaignVoteImplementation(
      _campaignVotesImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addFactoryTransactionConfig(
      _prop: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCampaignTransactionConfig(
      _prop: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultCommission(
      _numerator: PromiseOrValue<BigNumberish>,
      _denominator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCategoryCommission(
      _categoryId: PromiseOrValue<BigNumberish>,
      _numerator: PromiseOrValue<BigNumberish>,
      _denominator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addToken(
      _token: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      _hashedToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    toggleAcceptedToken(
      _token: PromiseOrValue<string>,
      _state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    canManageCampaigns(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    receiveCampaignCommission(
      _campaign: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signUp(
      _hashedUser: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userIsVerified(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initiateUserTransfer(
      _user: PromiseOrValue<string>,
      _forSelf: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deactivateAccountTransfer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addTrustee(
      _trustee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeTrustee(
      _trusteeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    toggleUserApproval(
      _user: PromiseOrValue<string>,
      _approval: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createCampaign(
      _categoryId: PromiseOrValue<BigNumberish>,
      _privateCampaign: PromiseOrValue<boolean>,
      _hashedCampaignInfo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    toggleCampaignActivation(
      _campaign: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    toggleCampaignPrivacy(
      _campaign: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    modifyCampaignCategory(
      _campaign: PromiseOrValue<string>,
      _newCategoryId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createCategory(
      _active: PromiseOrValue<boolean>,
      _title: PromiseOrValue<string>,
      _hashedCategory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    modifyCategory(
      _categoryId: PromiseOrValue<BigNumberish>,
      _active: PromiseOrValue<boolean>,
      _title: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpauseCampaign(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pauseCampaign(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
