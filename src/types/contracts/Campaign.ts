/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface CampaignInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "MANAGER()": FunctionFragment;
    "acceptedToken()": FunctionFragment;
    "addRole(address,bytes32)": FunctionFragment;
    "allowContributionAfterTargetIsMet()": FunctionFragment;
    "allowedToContribute(address)": FunctionFragment;
    "approvers(address)": FunctionFragment;
    "approversCount()": FunctionFragment;
    "campaignBalance()": FunctionFragment;
    "campaignFactoryContract()": FunctionFragment;
    "campaignRequestContract()": FunctionFragment;
    "campaignRewardContract()": FunctionFragment;
    "campaignState()": FunctionFragment;
    "campaignVoteContract()": FunctionFragment;
    "contributionId(address)": FunctionFragment;
    "deadline()": FunctionFragment;
    "deadlineSetTimes()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "goalType()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "minimumContribution()": FunctionFragment;
    "paused()": FunctionFragment;
    "percent()": FunctionFragment;
    "percentBase()": FunctionFragment;
    "removeRole(address,bytes32)": FunctionFragment;
    "renounceAdmin()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "reportCount()": FunctionFragment;
    "reportHash(address)": FunctionFragment;
    "reported(address)": FunctionFragment;
    "reviewCount()": FunctionFragment;
    "reviewHash(address)": FunctionFragment;
    "reviewed(address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "root()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "target()": FunctionFragment;
    "timeUntilNextTransferConfirmation(address)": FunctionFragment;
    "totalCampaignContribution()": FunctionFragment;
    "transferAttemptCount(address)": FunctionFragment;
    "withdrawalsPaused()": FunctionFragment;
    "__Campaign_init(address,address,address,address,address)": FunctionFragment;
    "isCampaignAdmin(address)": FunctionFragment;
    "isCampaignManager(address)": FunctionFragment;
    "getCampaignGoalType()": FunctionFragment;
    "getCampaignState(uint256)": FunctionFragment;
    "transferCampaignOwnership(address,address)": FunctionFragment;
    "transferCampaignUserData(address,address)": FunctionFragment;
    "setCampaignSettings(uint256,uint256,uint256,uint256,address,bool)": FunctionFragment;
    "extendDeadline(uint256)": FunctionFragment;
    "setDeadlineSetTimes(uint8)": FunctionFragment;
    "toggleContributorApproval(address)": FunctionFragment;
    "contribute(address,uint256,bool)": FunctionFragment;
    "withdrawContribution(address)": FunctionFragment;
    "userContributionLoss(address)": FunctionFragment;
    "finalizeRequest(uint256)": FunctionFragment;
    "reviewMode()": FunctionFragment;
    "reviewCampaignPerformance(string)": FunctionFragment;
    "markCampaignComplete()": FunctionFragment;
    "reportCampaign(string)": FunctionFragment;
    "setCampaignState(uint256)": FunctionFragment;
    "toggleWithdrawalState(bool)": FunctionFragment;
    "unpauseCampaign()": FunctionFragment;
    "pauseCampaign()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "MANAGER"
      | "acceptedToken"
      | "addRole"
      | "allowContributionAfterTargetIsMet"
      | "allowedToContribute"
      | "approvers"
      | "approversCount"
      | "campaignBalance"
      | "campaignFactoryContract"
      | "campaignRequestContract"
      | "campaignRewardContract"
      | "campaignState"
      | "campaignVoteContract"
      | "contributionId"
      | "deadline"
      | "deadlineSetTimes"
      | "getRoleAdmin"
      | "goalType"
      | "grantRole"
      | "hasRole"
      | "minimumContribution"
      | "paused"
      | "percent"
      | "percentBase"
      | "removeRole"
      | "renounceAdmin"
      | "renounceRole"
      | "reportCount"
      | "reportHash"
      | "reported"
      | "reviewCount"
      | "reviewHash"
      | "reviewed"
      | "revokeRole"
      | "root"
      | "supportsInterface"
      | "target"
      | "timeUntilNextTransferConfirmation"
      | "totalCampaignContribution"
      | "transferAttemptCount"
      | "withdrawalsPaused"
      | "__Campaign_init"
      | "isCampaignAdmin"
      | "isCampaignManager"
      | "getCampaignGoalType"
      | "getCampaignState"
      | "transferCampaignOwnership"
      | "transferCampaignUserData"
      | "setCampaignSettings"
      | "extendDeadline"
      | "setDeadlineSetTimes"
      | "toggleContributorApproval"
      | "contribute"
      | "withdrawContribution"
      | "userContributionLoss"
      | "finalizeRequest"
      | "reviewMode"
      | "reviewCampaignPerformance"
      | "markCampaignComplete"
      | "reportCampaign"
      | "setCampaignState"
      | "toggleWithdrawalState"
      | "unpauseCampaign"
      | "pauseCampaign"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MANAGER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "acceptedToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addRole",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowContributionAfterTargetIsMet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowedToContribute",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "approvers", values: [string]): string;
  encodeFunctionData(
    functionFragment: "approversCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaignBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaignFactoryContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaignRequestContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaignRewardContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaignState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaignVoteContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contributionId",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "deadline", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deadlineSetTimes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "goalType", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumContribution",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "percent", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "percentBase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeRole",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "reportCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "reportHash", values: [string]): string;
  encodeFunctionData(functionFragment: "reported", values: [string]): string;
  encodeFunctionData(
    functionFragment: "reviewCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "reviewHash", values: [string]): string;
  encodeFunctionData(functionFragment: "reviewed", values: [string]): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "root", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "target", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "timeUntilNextTransferConfirmation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalCampaignContribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferAttemptCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalsPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__Campaign_init",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isCampaignAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isCampaignManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaignGoalType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaignState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferCampaignOwnership",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferCampaignUserData",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCampaignSettings",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "extendDeadline",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDeadlineSetTimes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleContributorApproval",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "contribute",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawContribution",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userContributionLoss",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reviewMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reviewCampaignPerformance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "markCampaignComplete",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reportCampaign",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCampaignState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleWithdrawalState",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseCampaign",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pauseCampaign",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MANAGER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowContributionAfterTargetIsMet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedToContribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approvers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approversCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignFactoryContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignRequestContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignRewardContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignVoteContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deadline", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deadlineSetTimes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "goalType", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minimumContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "percent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "percentBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reportCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reportHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reported", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reviewCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reviewHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reviewed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "root", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "target", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "timeUntilNextTransferConfirmation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCampaignContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAttemptCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalsPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__Campaign_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCampaignAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCampaignManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignGoalType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferCampaignOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferCampaignUserData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCampaignSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extendDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDeadlineSetTimes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleContributorApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "contribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userContributionLoss",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reviewMode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reviewCampaignPerformance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markCampaignComplete",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reportCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCampaignState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleWithdrawalState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpauseCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseCampaign",
    data: BytesLike
  ): Result;

  events: {
    "CampaignDeadlineExtended(uint256)": EventFragment;
    "CampaignOwnerSet(address)": EventFragment;
    "CampaignOwnershipTransferred(address)": EventFragment;
    "CampaignReported(address,string)": EventFragment;
    "CampaignReviewed(address,string)": EventFragment;
    "CampaignSettingsUpdated(uint256,uint256,uint256,uint256,address,bool)": EventFragment;
    "CampaignStateChange(uint8)": EventFragment;
    "CampaignUserDataTransferred(address,address)": EventFragment;
    "ContributionMade(uint256,uint256,uint256,uint256,bool)": EventFragment;
    "ContributionWithdrawn(uint256,uint256,address)": EventFragment;
    "ContributorApprovalToggled(address,bool)": EventFragment;
    "DeadlineThresholdExtended(uint8)": EventFragment;
    "Paused(address)": EventFragment;
    "RequestComplete(uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "WithdrawalStateUpdated(bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CampaignDeadlineExtended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CampaignOwnerSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CampaignOwnershipTransferred"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CampaignReported"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CampaignReviewed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CampaignSettingsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CampaignStateChange"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CampaignUserDataTransferred"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContributionMade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContributionWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContributorApprovalToggled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeadlineThresholdExtended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestComplete"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalStateUpdated"): EventFragment;
}

export interface CampaignDeadlineExtendedEventObject {
  time: BigNumber;
}
export type CampaignDeadlineExtendedEvent = TypedEvent<
  [BigNumber],
  CampaignDeadlineExtendedEventObject
>;

export type CampaignDeadlineExtendedEventFilter =
  TypedEventFilter<CampaignDeadlineExtendedEvent>;

export interface CampaignOwnerSetEventObject {
  user: string;
}
export type CampaignOwnerSetEvent = TypedEvent<
  [string],
  CampaignOwnerSetEventObject
>;

export type CampaignOwnerSetEventFilter =
  TypedEventFilter<CampaignOwnerSetEvent>;

export interface CampaignOwnershipTransferredEventObject {
  newOwner: string;
}
export type CampaignOwnershipTransferredEvent = TypedEvent<
  [string],
  CampaignOwnershipTransferredEventObject
>;

export type CampaignOwnershipTransferredEventFilter =
  TypedEventFilter<CampaignOwnershipTransferredEvent>;

export interface CampaignReportedEventObject {
  user: string;
  hashedReport: string;
}
export type CampaignReportedEvent = TypedEvent<
  [string, string],
  CampaignReportedEventObject
>;

export type CampaignReportedEventFilter =
  TypedEventFilter<CampaignReportedEvent>;

export interface CampaignReviewedEventObject {
  user: string;
  hashedReview: string;
}
export type CampaignReviewedEvent = TypedEvent<
  [string, string],
  CampaignReviewedEventObject
>;

export type CampaignReviewedEventFilter =
  TypedEventFilter<CampaignReviewedEvent>;

export interface CampaignSettingsUpdatedEventObject {
  target: BigNumber;
  minimumContribution: BigNumber;
  duration: BigNumber;
  goalType: BigNumber;
  token: string;
  allowContributionAfterTargetIsMet: boolean;
}
export type CampaignSettingsUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, string, boolean],
  CampaignSettingsUpdatedEventObject
>;

export type CampaignSettingsUpdatedEventFilter =
  TypedEventFilter<CampaignSettingsUpdatedEvent>;

export interface CampaignStateChangeEventObject {
  state: number;
}
export type CampaignStateChangeEvent = TypedEvent<
  [number],
  CampaignStateChangeEventObject
>;

export type CampaignStateChangeEventFilter =
  TypedEventFilter<CampaignStateChangeEvent>;

export interface CampaignUserDataTransferredEventObject {
  oldAddress: string;
  newAddress: string;
}
export type CampaignUserDataTransferredEvent = TypedEvent<
  [string, string],
  CampaignUserDataTransferredEventObject
>;

export type CampaignUserDataTransferredEventFilter =
  TypedEventFilter<CampaignUserDataTransferredEvent>;

export interface ContributionMadeEventObject {
  contributionId: BigNumber;
  amount: BigNumber;
  rewardId: BigNumber;
  rewardRecipientId: BigNumber;
  withReward: boolean;
}
export type ContributionMadeEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, boolean],
  ContributionMadeEventObject
>;

export type ContributionMadeEventFilter =
  TypedEventFilter<ContributionMadeEvent>;

export interface ContributionWithdrawnEventObject {
  contributionId: BigNumber;
  amount: BigNumber;
  user: string;
}
export type ContributionWithdrawnEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  ContributionWithdrawnEventObject
>;

export type ContributionWithdrawnEventFilter =
  TypedEventFilter<ContributionWithdrawnEvent>;

export interface ContributorApprovalToggledEventObject {
  contributor: string;
  isApproved: boolean;
}
export type ContributorApprovalToggledEvent = TypedEvent<
  [string, boolean],
  ContributorApprovalToggledEventObject
>;

export type ContributorApprovalToggledEventFilter =
  TypedEventFilter<ContributorApprovalToggledEvent>;

export interface DeadlineThresholdExtendedEventObject {
  count: number;
}
export type DeadlineThresholdExtendedEvent = TypedEvent<
  [number],
  DeadlineThresholdExtendedEventObject
>;

export type DeadlineThresholdExtendedEventFilter =
  TypedEventFilter<DeadlineThresholdExtendedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RequestCompleteEventObject {
  requestId: BigNumber;
}
export type RequestCompleteEvent = TypedEvent<
  [BigNumber],
  RequestCompleteEventObject
>;

export type RequestCompleteEventFilter = TypedEventFilter<RequestCompleteEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface WithdrawalStateUpdatedEventObject {
  withdrawalState: boolean;
}
export type WithdrawalStateUpdatedEvent = TypedEvent<
  [boolean],
  WithdrawalStateUpdatedEventObject
>;

export type WithdrawalStateUpdatedEventFilter =
  TypedEventFilter<WithdrawalStateUpdatedEvent>;

export interface Campaign extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CampaignInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MANAGER(overrides?: CallOverrides): Promise<[string]>;

    acceptedToken(overrides?: CallOverrides): Promise<[string]>;

    addRole(
      _account: string,
      _role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowContributionAfterTargetIsMet(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    allowedToContribute(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    approvers(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    approversCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    campaignBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    campaignFactoryContract(overrides?: CallOverrides): Promise<[string]>;

    campaignRequestContract(overrides?: CallOverrides): Promise<[string]>;

    campaignRewardContract(overrides?: CallOverrides): Promise<[string]>;

    campaignState(overrides?: CallOverrides): Promise<[number]>;

    campaignVoteContract(overrides?: CallOverrides): Promise<[string]>;

    contributionId(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    deadline(overrides?: CallOverrides): Promise<[BigNumber]>;

    deadlineSetTimes(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    goalType(overrides?: CallOverrides): Promise<[number]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    minimumContribution(overrides?: CallOverrides): Promise<[BigNumber]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    percent(overrides?: CallOverrides): Promise<[BigNumber]>;

    percentBase(overrides?: CallOverrides): Promise<[number]>;

    removeRole(
      _account: string,
      _role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reportCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    reportHash(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    reported(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    reviewCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    reviewHash(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    reviewed(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    root(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    target(overrides?: CallOverrides): Promise<[BigNumber]>;

    timeUntilNextTransferConfirmation(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalCampaignContribution(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferAttemptCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawalsPaused(overrides?: CallOverrides): Promise<[boolean]>;

    __Campaign_init(
      _campaignFactory: string,
      _campaignRewards: string,
      _campaignRequests: string,
      _campaignVotes: string,
      _root: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isCampaignAdmin(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isCampaignManager(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getCampaignGoalType(overrides?: CallOverrides): Promise<[number]>;

    getCampaignState(
      _state: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    transferCampaignOwnership(
      _oldRoot: string,
      _newRoot: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferCampaignUserData(
      _oldAddress: string,
      _newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCampaignSettings(
      _target: BigNumberish,
      _minimumContribution: BigNumberish,
      _duration: BigNumberish,
      _goalType: BigNumberish,
      _token: string,
      _allowContributionAfterTargetIsMet: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    extendDeadline(
      _time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDeadlineSetTimes(
      _count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleContributorApproval(
      _contributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contribute(
      _token: string,
      _rewardId: BigNumberish,
      _withReward: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawContribution(
      _wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userContributionLoss(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    finalizeRequest(
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reviewMode(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reviewCampaignPerformance(
      _hashedReview: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    markCampaignComplete(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reportCampaign(
      _hashedReport: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCampaignState(
      _state: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleWithdrawalState(
      _state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpauseCampaign(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pauseCampaign(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  MANAGER(overrides?: CallOverrides): Promise<string>;

  acceptedToken(overrides?: CallOverrides): Promise<string>;

  addRole(
    _account: string,
    _role: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowContributionAfterTargetIsMet(
    overrides?: CallOverrides
  ): Promise<boolean>;

  allowedToContribute(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  approvers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  approversCount(overrides?: CallOverrides): Promise<BigNumber>;

  campaignBalance(overrides?: CallOverrides): Promise<BigNumber>;

  campaignFactoryContract(overrides?: CallOverrides): Promise<string>;

  campaignRequestContract(overrides?: CallOverrides): Promise<string>;

  campaignRewardContract(overrides?: CallOverrides): Promise<string>;

  campaignState(overrides?: CallOverrides): Promise<number>;

  campaignVoteContract(overrides?: CallOverrides): Promise<string>;

  contributionId(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  deadline(overrides?: CallOverrides): Promise<BigNumber>;

  deadlineSetTimes(overrides?: CallOverrides): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  goalType(overrides?: CallOverrides): Promise<number>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  minimumContribution(overrides?: CallOverrides): Promise<BigNumber>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  percent(overrides?: CallOverrides): Promise<BigNumber>;

  percentBase(overrides?: CallOverrides): Promise<number>;

  removeRole(
    _account: string,
    _role: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceAdmin(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reportCount(overrides?: CallOverrides): Promise<BigNumber>;

  reportHash(arg0: string, overrides?: CallOverrides): Promise<string>;

  reported(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  reviewCount(overrides?: CallOverrides): Promise<BigNumber>;

  reviewHash(arg0: string, overrides?: CallOverrides): Promise<string>;

  reviewed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  root(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  target(overrides?: CallOverrides): Promise<BigNumber>;

  timeUntilNextTransferConfirmation(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalCampaignContribution(overrides?: CallOverrides): Promise<BigNumber>;

  transferAttemptCount(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawalsPaused(overrides?: CallOverrides): Promise<boolean>;

  __Campaign_init(
    _campaignFactory: string,
    _campaignRewards: string,
    _campaignRequests: string,
    _campaignVotes: string,
    _root: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isCampaignAdmin(_user: string, overrides?: CallOverrides): Promise<boolean>;

  isCampaignManager(_user: string, overrides?: CallOverrides): Promise<boolean>;

  getCampaignGoalType(overrides?: CallOverrides): Promise<number>;

  getCampaignState(
    _state: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  transferCampaignOwnership(
    _oldRoot: string,
    _newRoot: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferCampaignUserData(
    _oldAddress: string,
    _newAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCampaignSettings(
    _target: BigNumberish,
    _minimumContribution: BigNumberish,
    _duration: BigNumberish,
    _goalType: BigNumberish,
    _token: string,
    _allowContributionAfterTargetIsMet: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  extendDeadline(
    _time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDeadlineSetTimes(
    _count: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleContributorApproval(
    _contributor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contribute(
    _token: string,
    _rewardId: BigNumberish,
    _withReward: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawContribution(
    _wallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userContributionLoss(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  finalizeRequest(
    _requestId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reviewMode(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reviewCampaignPerformance(
    _hashedReview: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  markCampaignComplete(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reportCampaign(
    _hashedReport: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCampaignState(
    _state: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleWithdrawalState(
    _state: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpauseCampaign(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pauseCampaign(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    MANAGER(overrides?: CallOverrides): Promise<string>;

    acceptedToken(overrides?: CallOverrides): Promise<string>;

    addRole(
      _account: string,
      _role: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    allowContributionAfterTargetIsMet(
      overrides?: CallOverrides
    ): Promise<boolean>;

    allowedToContribute(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    approvers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    approversCount(overrides?: CallOverrides): Promise<BigNumber>;

    campaignBalance(overrides?: CallOverrides): Promise<BigNumber>;

    campaignFactoryContract(overrides?: CallOverrides): Promise<string>;

    campaignRequestContract(overrides?: CallOverrides): Promise<string>;

    campaignRewardContract(overrides?: CallOverrides): Promise<string>;

    campaignState(overrides?: CallOverrides): Promise<number>;

    campaignVoteContract(overrides?: CallOverrides): Promise<string>;

    contributionId(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    deadline(overrides?: CallOverrides): Promise<BigNumber>;

    deadlineSetTimes(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    goalType(overrides?: CallOverrides): Promise<number>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    minimumContribution(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    percent(overrides?: CallOverrides): Promise<BigNumber>;

    percentBase(overrides?: CallOverrides): Promise<number>;

    removeRole(
      _account: string,
      _role: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceAdmin(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    reportCount(overrides?: CallOverrides): Promise<BigNumber>;

    reportHash(arg0: string, overrides?: CallOverrides): Promise<string>;

    reported(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    reviewCount(overrides?: CallOverrides): Promise<BigNumber>;

    reviewHash(arg0: string, overrides?: CallOverrides): Promise<string>;

    reviewed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    root(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    target(overrides?: CallOverrides): Promise<BigNumber>;

    timeUntilNextTransferConfirmation(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalCampaignContribution(overrides?: CallOverrides): Promise<BigNumber>;

    transferAttemptCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawalsPaused(overrides?: CallOverrides): Promise<boolean>;

    __Campaign_init(
      _campaignFactory: string,
      _campaignRewards: string,
      _campaignRequests: string,
      _campaignVotes: string,
      _root: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isCampaignAdmin(_user: string, overrides?: CallOverrides): Promise<boolean>;

    isCampaignManager(
      _user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getCampaignGoalType(overrides?: CallOverrides): Promise<number>;

    getCampaignState(
      _state: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    transferCampaignOwnership(
      _oldRoot: string,
      _newRoot: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferCampaignUserData(
      _oldAddress: string,
      _newAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCampaignSettings(
      _target: BigNumberish,
      _minimumContribution: BigNumberish,
      _duration: BigNumberish,
      _goalType: BigNumberish,
      _token: string,
      _allowContributionAfterTargetIsMet: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    extendDeadline(
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDeadlineSetTimes(
      _count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    toggleContributorApproval(
      _contributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    contribute(
      _token: string,
      _rewardId: BigNumberish,
      _withReward: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawContribution(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userContributionLoss(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finalizeRequest(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    reviewMode(overrides?: CallOverrides): Promise<void>;

    reviewCampaignPerformance(
      _hashedReview: string,
      overrides?: CallOverrides
    ): Promise<void>;

    markCampaignComplete(overrides?: CallOverrides): Promise<void>;

    reportCampaign(
      _hashedReport: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCampaignState(
      _state: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    toggleWithdrawalState(
      _state: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    unpauseCampaign(overrides?: CallOverrides): Promise<void>;

    pauseCampaign(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "CampaignDeadlineExtended(uint256)"(
      time?: null
    ): CampaignDeadlineExtendedEventFilter;
    CampaignDeadlineExtended(time?: null): CampaignDeadlineExtendedEventFilter;

    "CampaignOwnerSet(address)"(user?: null): CampaignOwnerSetEventFilter;
    CampaignOwnerSet(user?: null): CampaignOwnerSetEventFilter;

    "CampaignOwnershipTransferred(address)"(
      newOwner?: null
    ): CampaignOwnershipTransferredEventFilter;
    CampaignOwnershipTransferred(
      newOwner?: null
    ): CampaignOwnershipTransferredEventFilter;

    "CampaignReported(address,string)"(
      user?: null,
      hashedReport?: null
    ): CampaignReportedEventFilter;
    CampaignReported(
      user?: null,
      hashedReport?: null
    ): CampaignReportedEventFilter;

    "CampaignReviewed(address,string)"(
      user?: null,
      hashedReview?: null
    ): CampaignReviewedEventFilter;
    CampaignReviewed(
      user?: null,
      hashedReview?: null
    ): CampaignReviewedEventFilter;

    "CampaignSettingsUpdated(uint256,uint256,uint256,uint256,address,bool)"(
      target?: null,
      minimumContribution?: null,
      duration?: null,
      goalType?: null,
      token?: null,
      allowContributionAfterTargetIsMet?: null
    ): CampaignSettingsUpdatedEventFilter;
    CampaignSettingsUpdated(
      target?: null,
      minimumContribution?: null,
      duration?: null,
      goalType?: null,
      token?: null,
      allowContributionAfterTargetIsMet?: null
    ): CampaignSettingsUpdatedEventFilter;

    "CampaignStateChange(uint8)"(state?: null): CampaignStateChangeEventFilter;
    CampaignStateChange(state?: null): CampaignStateChangeEventFilter;

    "CampaignUserDataTransferred(address,address)"(
      oldAddress?: null,
      newAddress?: null
    ): CampaignUserDataTransferredEventFilter;
    CampaignUserDataTransferred(
      oldAddress?: null,
      newAddress?: null
    ): CampaignUserDataTransferredEventFilter;

    "ContributionMade(uint256,uint256,uint256,uint256,bool)"(
      contributionId?: BigNumberish | null,
      amount?: null,
      rewardId?: BigNumberish | null,
      rewardRecipientId?: BigNumberish | null,
      withReward?: null
    ): ContributionMadeEventFilter;
    ContributionMade(
      contributionId?: BigNumberish | null,
      amount?: null,
      rewardId?: BigNumberish | null,
      rewardRecipientId?: BigNumberish | null,
      withReward?: null
    ): ContributionMadeEventFilter;

    "ContributionWithdrawn(uint256,uint256,address)"(
      contributionId?: BigNumberish | null,
      amount?: null,
      user?: null
    ): ContributionWithdrawnEventFilter;
    ContributionWithdrawn(
      contributionId?: BigNumberish | null,
      amount?: null,
      user?: null
    ): ContributionWithdrawnEventFilter;

    "ContributorApprovalToggled(address,bool)"(
      contributor?: null,
      isApproved?: null
    ): ContributorApprovalToggledEventFilter;
    ContributorApprovalToggled(
      contributor?: null,
      isApproved?: null
    ): ContributorApprovalToggledEventFilter;

    "DeadlineThresholdExtended(uint8)"(
      count?: null
    ): DeadlineThresholdExtendedEventFilter;
    DeadlineThresholdExtended(
      count?: null
    ): DeadlineThresholdExtendedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RequestComplete(uint256)"(
      requestId?: BigNumberish | null
    ): RequestCompleteEventFilter;
    RequestComplete(
      requestId?: BigNumberish | null
    ): RequestCompleteEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "WithdrawalStateUpdated(bool)"(
      withdrawalState?: null
    ): WithdrawalStateUpdatedEventFilter;
    WithdrawalStateUpdated(
      withdrawalState?: null
    ): WithdrawalStateUpdatedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MANAGER(overrides?: CallOverrides): Promise<BigNumber>;

    acceptedToken(overrides?: CallOverrides): Promise<BigNumber>;

    addRole(
      _account: string,
      _role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowContributionAfterTargetIsMet(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowedToContribute(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approvers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    approversCount(overrides?: CallOverrides): Promise<BigNumber>;

    campaignBalance(overrides?: CallOverrides): Promise<BigNumber>;

    campaignFactoryContract(overrides?: CallOverrides): Promise<BigNumber>;

    campaignRequestContract(overrides?: CallOverrides): Promise<BigNumber>;

    campaignRewardContract(overrides?: CallOverrides): Promise<BigNumber>;

    campaignState(overrides?: CallOverrides): Promise<BigNumber>;

    campaignVoteContract(overrides?: CallOverrides): Promise<BigNumber>;

    contributionId(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    deadline(overrides?: CallOverrides): Promise<BigNumber>;

    deadlineSetTimes(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    goalType(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minimumContribution(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    percent(overrides?: CallOverrides): Promise<BigNumber>;

    percentBase(overrides?: CallOverrides): Promise<BigNumber>;

    removeRole(
      _account: string,
      _role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reportCount(overrides?: CallOverrides): Promise<BigNumber>;

    reportHash(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    reported(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    reviewCount(overrides?: CallOverrides): Promise<BigNumber>;

    reviewHash(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    reviewed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    root(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    target(overrides?: CallOverrides): Promise<BigNumber>;

    timeUntilNextTransferConfirmation(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalCampaignContribution(overrides?: CallOverrides): Promise<BigNumber>;

    transferAttemptCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawalsPaused(overrides?: CallOverrides): Promise<BigNumber>;

    __Campaign_init(
      _campaignFactory: string,
      _campaignRewards: string,
      _campaignRequests: string,
      _campaignVotes: string,
      _root: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isCampaignAdmin(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCampaignManager(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCampaignGoalType(overrides?: CallOverrides): Promise<BigNumber>;

    getCampaignState(
      _state: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferCampaignOwnership(
      _oldRoot: string,
      _newRoot: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferCampaignUserData(
      _oldAddress: string,
      _newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCampaignSettings(
      _target: BigNumberish,
      _minimumContribution: BigNumberish,
      _duration: BigNumberish,
      _goalType: BigNumberish,
      _token: string,
      _allowContributionAfterTargetIsMet: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    extendDeadline(
      _time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDeadlineSetTimes(
      _count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleContributorApproval(
      _contributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contribute(
      _token: string,
      _rewardId: BigNumberish,
      _withReward: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawContribution(
      _wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userContributionLoss(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finalizeRequest(
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reviewMode(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reviewCampaignPerformance(
      _hashedReview: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    markCampaignComplete(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reportCampaign(
      _hashedReport: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCampaignState(
      _state: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleWithdrawalState(
      _state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpauseCampaign(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pauseCampaign(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MANAGER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptedToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addRole(
      _account: string,
      _role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowContributionAfterTargetIsMet(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowedToContribute(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approvers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approversCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    campaignBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    campaignFactoryContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    campaignRequestContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    campaignRewardContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    campaignState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    campaignVoteContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contributionId(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deadline(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deadlineSetTimes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    goalType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumContribution(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    percent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    percentBase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeRole(
      _account: string,
      _role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reportCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reportHash(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reported(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reviewCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reviewHash(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reviewed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    root(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    target(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timeUntilNextTransferConfirmation(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalCampaignContribution(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferAttemptCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawalsPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __Campaign_init(
      _campaignFactory: string,
      _campaignRewards: string,
      _campaignRequests: string,
      _campaignVotes: string,
      _root: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isCampaignAdmin(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCampaignManager(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCampaignGoalType(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCampaignState(
      _state: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferCampaignOwnership(
      _oldRoot: string,
      _newRoot: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferCampaignUserData(
      _oldAddress: string,
      _newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCampaignSettings(
      _target: BigNumberish,
      _minimumContribution: BigNumberish,
      _duration: BigNumberish,
      _goalType: BigNumberish,
      _token: string,
      _allowContributionAfterTargetIsMet: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    extendDeadline(
      _time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDeadlineSetTimes(
      _count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleContributorApproval(
      _contributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contribute(
      _token: string,
      _rewardId: BigNumberish,
      _withReward: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawContribution(
      _wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userContributionLoss(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finalizeRequest(
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reviewMode(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reviewCampaignPerformance(
      _hashedReview: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    markCampaignComplete(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reportCampaign(
      _hashedReport: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCampaignState(
      _state: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleWithdrawalState(
      _state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpauseCampaign(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pauseCampaign(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
