/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface FactoryInterface extends utils.Interface {
  functions: {
    "deployedCampaignCount()": FunctionFragment;
    "deployedCampaigns(address)": FunctionFragment;
    "createCampaignFactory(address,address,address,address,address,address,uint256[15])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "deployedCampaignCount"
      | "deployedCampaigns"
      | "createCampaignFactory"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deployedCampaignCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployedCampaigns",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createCampaignFactory",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "deployedCampaignCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployedCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCampaignFactory",
    data: BytesLike
  ): Result;

  events: {
    "CampaignFactoryDeployed(address,address,address,address,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CampaignFactoryDeployed"): EventFragment;
}

export interface CampaignFactoryDeployedEventObject {
  campaignFactory: string;
  governance: string;
  campaignImplementation: string;
  campaignRequestImplementation: string;
  campaignVoteImplementation: string;
  campaignRewardImplementation: string;
  campaignIndex: BigNumber;
}
export type CampaignFactoryDeployedEvent = TypedEvent<
  [string, string, string, string, string, string, BigNumber],
  CampaignFactoryDeployedEventObject
>;

export type CampaignFactoryDeployedEventFilter =
  TypedEventFilter<CampaignFactoryDeployedEvent>;

export interface Factory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deployedCampaignCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    deployedCampaigns(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { factory: string }>;

    createCampaignFactory(
      _campaignFactoryImplementation: PromiseOrValue<string>,
      _campaignImplementation: PromiseOrValue<string>,
      _campaignRequestImplementation: PromiseOrValue<string>,
      _campaignVoteImplementation: PromiseOrValue<string>,
      _campaignRewardImplementation: PromiseOrValue<string>,
      _governance: PromiseOrValue<string>,
      _config: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  deployedCampaignCount(overrides?: CallOverrides): Promise<BigNumber>;

  deployedCampaigns(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  createCampaignFactory(
    _campaignFactoryImplementation: PromiseOrValue<string>,
    _campaignImplementation: PromiseOrValue<string>,
    _campaignRequestImplementation: PromiseOrValue<string>,
    _campaignVoteImplementation: PromiseOrValue<string>,
    _campaignRewardImplementation: PromiseOrValue<string>,
    _governance: PromiseOrValue<string>,
    _config: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    deployedCampaignCount(overrides?: CallOverrides): Promise<BigNumber>;

    deployedCampaigns(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    createCampaignFactory(
      _campaignFactoryImplementation: PromiseOrValue<string>,
      _campaignImplementation: PromiseOrValue<string>,
      _campaignRequestImplementation: PromiseOrValue<string>,
      _campaignVoteImplementation: PromiseOrValue<string>,
      _campaignRewardImplementation: PromiseOrValue<string>,
      _governance: PromiseOrValue<string>,
      _config: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CampaignFactoryDeployed(address,address,address,address,address,address,uint256)"(
      campaignFactory?: PromiseOrValue<string> | null,
      governance?: null,
      campaignImplementation?: null,
      campaignRequestImplementation?: null,
      campaignVoteImplementation?: null,
      campaignRewardImplementation?: null,
      campaignIndex?: null
    ): CampaignFactoryDeployedEventFilter;
    CampaignFactoryDeployed(
      campaignFactory?: PromiseOrValue<string> | null,
      governance?: null,
      campaignImplementation?: null,
      campaignRequestImplementation?: null,
      campaignVoteImplementation?: null,
      campaignRewardImplementation?: null,
      campaignIndex?: null
    ): CampaignFactoryDeployedEventFilter;
  };

  estimateGas: {
    deployedCampaignCount(overrides?: CallOverrides): Promise<BigNumber>;

    deployedCampaigns(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createCampaignFactory(
      _campaignFactoryImplementation: PromiseOrValue<string>,
      _campaignImplementation: PromiseOrValue<string>,
      _campaignRequestImplementation: PromiseOrValue<string>,
      _campaignVoteImplementation: PromiseOrValue<string>,
      _campaignRewardImplementation: PromiseOrValue<string>,
      _governance: PromiseOrValue<string>,
      _config: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deployedCampaignCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployedCampaigns(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createCampaignFactory(
      _campaignFactoryImplementation: PromiseOrValue<string>,
      _campaignImplementation: PromiseOrValue<string>,
      _campaignRequestImplementation: PromiseOrValue<string>,
      _campaignVoteImplementation: PromiseOrValue<string>,
      _campaignRewardImplementation: PromiseOrValue<string>,
      _governance: PromiseOrValue<string>,
      _config: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
