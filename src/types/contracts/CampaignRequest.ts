/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface CampaignRequestInterface extends utils.Interface {
  functions: {
    "campaignContract()": FunctionFragment;
    "campaignFactoryContract()": FunctionFragment;
    "campaignFactoryInterface()": FunctionFragment;
    "campaignInterface()": FunctionFragment;
    "currentRunningRequest()": FunctionFragment;
    "finalizedRequestCount()": FunctionFragment;
    "paused()": FunctionFragment;
    "requestCount()": FunctionFragment;
    "requests(uint256)": FunctionFragment;
    "__CampaignRequest_init(address,address)": FunctionFragment;
    "createRequest(address,uint256,uint256,string)": FunctionFragment;
    "voidRequest(uint256)": FunctionFragment;
    "signRequestVote(uint256,uint256)": FunctionFragment;
    "cancelVoteSignature(uint256)": FunctionFragment;
    "signRequestFinalization(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "campaignContract"
      | "campaignFactoryContract"
      | "campaignFactoryInterface"
      | "campaignInterface"
      | "currentRunningRequest"
      | "finalizedRequestCount"
      | "paused"
      | "requestCount"
      | "requests"
      | "__CampaignRequest_init"
      | "createRequest"
      | "voidRequest"
      | "signRequestVote"
      | "cancelVoteSignature"
      | "signRequestFinalization"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "campaignContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaignFactoryContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaignFactoryInterface",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaignInterface",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentRunningRequest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalizedRequestCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "requestCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requests",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "__CampaignRequest_init",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createRequest",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "voidRequest",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "signRequestVote",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelVoteSignature",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "signRequestFinalization",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "campaignContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignFactoryContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignFactoryInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRunningRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizedRequestCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "requests", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "__CampaignRequest_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voidRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signRequestVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelVoteSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signRequestFinalization",
    data: BytesLike
  ): Result;

  events: {
    "Paused(address)": EventFragment;
    "RequestAdded(uint256,uint256,uint256,string,address)": EventFragment;
    "RequestVoided(uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestVoided"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RequestAddedEventObject {
  requestId: BigNumber;
  duration: BigNumber;
  value: BigNumber;
  hashedRequest: string;
  recipient: string;
}
export type RequestAddedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string, string],
  RequestAddedEventObject
>;

export type RequestAddedEventFilter = TypedEventFilter<RequestAddedEvent>;

export interface RequestVoidedEventObject {
  requestId: BigNumber;
}
export type RequestVoidedEvent = TypedEvent<
  [BigNumber],
  RequestVoidedEventObject
>;

export type RequestVoidedEventFilter = TypedEventFilter<RequestVoidedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface CampaignRequest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CampaignRequestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    campaignContract(overrides?: CallOverrides): Promise<[string]>;

    campaignFactoryContract(overrides?: CallOverrides): Promise<[string]>;

    campaignFactoryInterface(overrides?: CallOverrides): Promise<[string]>;

    campaignInterface(overrides?: CallOverrides): Promise<[string]>;

    currentRunningRequest(overrides?: CallOverrides): Promise<[BigNumber]>;

    finalizedRequestCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    requestCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    requests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        boolean,
        boolean
      ] & {
        recipient: string;
        value: BigNumber;
        approvalCount: BigNumber;
        againstCount: BigNumber;
        abstainedCount: BigNumber;
        duration: BigNumber;
        hashedRequest: string;
        complete: boolean;
        void: boolean;
      }
    >;

    __CampaignRequest_init(
      _campaignFactory: PromiseOrValue<string>,
      _campaign: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createRequest(
      _recipient: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _duration: PromiseOrValue<BigNumberish>,
      _hashedRequest: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    voidRequest(
      _requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signRequestVote(
      _requestId: PromiseOrValue<BigNumberish>,
      _support: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelVoteSignature(
      _requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signRequestFinalization(
      _requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  campaignContract(overrides?: CallOverrides): Promise<string>;

  campaignFactoryContract(overrides?: CallOverrides): Promise<string>;

  campaignFactoryInterface(overrides?: CallOverrides): Promise<string>;

  campaignInterface(overrides?: CallOverrides): Promise<string>;

  currentRunningRequest(overrides?: CallOverrides): Promise<BigNumber>;

  finalizedRequestCount(overrides?: CallOverrides): Promise<BigNumber>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  requestCount(overrides?: CallOverrides): Promise<BigNumber>;

  requests(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      boolean,
      boolean
    ] & {
      recipient: string;
      value: BigNumber;
      approvalCount: BigNumber;
      againstCount: BigNumber;
      abstainedCount: BigNumber;
      duration: BigNumber;
      hashedRequest: string;
      complete: boolean;
      void: boolean;
    }
  >;

  __CampaignRequest_init(
    _campaignFactory: PromiseOrValue<string>,
    _campaign: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createRequest(
    _recipient: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    _duration: PromiseOrValue<BigNumberish>,
    _hashedRequest: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  voidRequest(
    _requestId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signRequestVote(
    _requestId: PromiseOrValue<BigNumberish>,
    _support: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelVoteSignature(
    _requestId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signRequestFinalization(
    _requestId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    campaignContract(overrides?: CallOverrides): Promise<string>;

    campaignFactoryContract(overrides?: CallOverrides): Promise<string>;

    campaignFactoryInterface(overrides?: CallOverrides): Promise<string>;

    campaignInterface(overrides?: CallOverrides): Promise<string>;

    currentRunningRequest(overrides?: CallOverrides): Promise<BigNumber>;

    finalizedRequestCount(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    requestCount(overrides?: CallOverrides): Promise<BigNumber>;

    requests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        boolean,
        boolean
      ] & {
        recipient: string;
        value: BigNumber;
        approvalCount: BigNumber;
        againstCount: BigNumber;
        abstainedCount: BigNumber;
        duration: BigNumber;
        hashedRequest: string;
        complete: boolean;
        void: boolean;
      }
    >;

    __CampaignRequest_init(
      _campaignFactory: PromiseOrValue<string>,
      _campaign: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createRequest(
      _recipient: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _duration: PromiseOrValue<BigNumberish>,
      _hashedRequest: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    voidRequest(
      _requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    signRequestVote(
      _requestId: PromiseOrValue<BigNumberish>,
      _support: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelVoteSignature(
      _requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    signRequestFinalization(
      _requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RequestAdded(uint256,uint256,uint256,string,address)"(
      requestId?: PromiseOrValue<BigNumberish> | null,
      duration?: null,
      value?: null,
      hashedRequest?: null,
      recipient?: null
    ): RequestAddedEventFilter;
    RequestAdded(
      requestId?: PromiseOrValue<BigNumberish> | null,
      duration?: null,
      value?: null,
      hashedRequest?: null,
      recipient?: null
    ): RequestAddedEventFilter;

    "RequestVoided(uint256)"(
      requestId?: PromiseOrValue<BigNumberish> | null
    ): RequestVoidedEventFilter;
    RequestVoided(
      requestId?: PromiseOrValue<BigNumberish> | null
    ): RequestVoidedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    campaignContract(overrides?: CallOverrides): Promise<BigNumber>;

    campaignFactoryContract(overrides?: CallOverrides): Promise<BigNumber>;

    campaignFactoryInterface(overrides?: CallOverrides): Promise<BigNumber>;

    campaignInterface(overrides?: CallOverrides): Promise<BigNumber>;

    currentRunningRequest(overrides?: CallOverrides): Promise<BigNumber>;

    finalizedRequestCount(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    requestCount(overrides?: CallOverrides): Promise<BigNumber>;

    requests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    __CampaignRequest_init(
      _campaignFactory: PromiseOrValue<string>,
      _campaign: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createRequest(
      _recipient: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _duration: PromiseOrValue<BigNumberish>,
      _hashedRequest: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    voidRequest(
      _requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signRequestVote(
      _requestId: PromiseOrValue<BigNumberish>,
      _support: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelVoteSignature(
      _requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signRequestFinalization(
      _requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    campaignContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    campaignFactoryContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    campaignFactoryInterface(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    campaignInterface(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentRunningRequest(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finalizedRequestCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requestCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    __CampaignRequest_init(
      _campaignFactory: PromiseOrValue<string>,
      _campaign: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createRequest(
      _recipient: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _duration: PromiseOrValue<BigNumberish>,
      _hashedRequest: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    voidRequest(
      _requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signRequestVote(
      _requestId: PromiseOrValue<BigNumberish>,
      _support: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelVoteSignature(
      _requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signRequestFinalization(
      _requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
